/*
 *5/12/2017
 *ISCS 215 Final Project 
 * @author #### #########
 * 
 * File: ASCIIConverterUI.java
 */


import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author noahcaulfield
 */
public class ASCIIConverterUI extends javax.swing.JFrame  {
/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
boolean negative;
FileDialog fd = new FileDialog(this, "Save the image", FileDialog.SAVE);

    /**
     * Creates new form ASCIIConverterUI
     */
    public ASCIIConverterUI() {  //polymorphism 
        this(false);
        initComponents();
        
    }
    public ASCIIConverterUI(final boolean negative) {
		this.negative = negative;
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        label1.setText("ASCII CONVERSION");

        label2.setText("Select File -> Open, then select your image");

        label3.setText("Conversion resized and saved to FullsizeASCII.txt"
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label2.getAccessibleContext().setAccessibleName("label2");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    ////GUI Construction Start///
    
    // Variables declaration - do not modify//GEN-BEGIN:variables     
    private javax.swing.JMenu jMenu1;        ///Items to add to the Menu 
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    // End of variables declaration//GEN-END:variables
   
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {
        // OPEN button 
        JFileChooser fileChooser = new JFileChooser();   //create a new instance of file chooser 
				fileChooser.setFileFilter(new FileNameExtensionFilter("Images", "jpg"));// explicitely select .jpg 
                                while (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { //correct type 
					try {
                                File f = fileChooser.getSelectedFile();         
						final BufferedImage image = ImageIO.read(f);
						if (image == null) throw new IllegalArgumentException(f + " is of the wrong file type. Please load a .jpg");//Error Handling 
                                                
                                      
						final String ascii = new ASCIIConverterUI().convert(image);  /// pass file to Convert Method, Inheritance 
                                                
                                                
                                                
                                                
                                                ///Write output to file 
                                                try {
    BufferedWriter write = new BufferedWriter(new FileWriter("ASCIIConvertion.txt"));
    write.write(ascii);  //Replace with the string  
                                            
    write.close(); //closse bufferedWriter 
}
catch (IOException e)  //error handling 
{
    System.out.println("Error writing file ");

}                                                                                           
 final JTextArea textArea = new JTextArea(ascii, image.getHeight(), image.getWidth());  // build JTextArea to display conversion  
                               textArea.setFont(new Font("Monospaced", Font.BOLD, 4));  // set the text inside it to be monospaced, bold, and of a font size 4 (To Scale)
                              
						textArea.setEditable(false);
                                                
                                             
						final JDialog dialog = new JOptionPane(new JScrollPane(textArea), JOptionPane.PLAIN_MESSAGE).createDialog(ASCIIConverterUI.class.getName());
						dialog.setResizable(true);
						dialog.setVisible(true);
                                               
					} catch (Exception e) {
						JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);                              
                                        }
 }
}
 private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
     /// JMenu icon for exit 
 
 System.exit(NORMAL);  /// Exit all
  
 }
 
 public String convert(final BufferedImage image) {              //inheritance 
		StringBuilder line = new StringBuilder((image.getWidth() + 1) * image.getHeight()); // count chars in line 
		for (int y = 0; y < image.getHeight(); y++) {
			if (line.length() != 0) line.append("\n"); //end of the line, newline  
			for (int x = 0; x < image.getWidth(); x++) {
                         
				Color pixelColor = new Color(image.getRGB(x, y));
				double gValue = (double) pixelColor.getRed() * 0.2989 + (double) pixelColor.getBlue() * 0.5870 + (double) pixelColor.getGreen() * 0.1140;
				final char s = negative ? negativeString(gValue) : positiveString(gValue);
				line.append(s);
			}
		}
		return line.toString();
          
            
	}

	private char positiveString(double g)//takes the grayscale value as parameter. Example of Encapsulation via declaring class private 
	{                                   // g grayscale
		final char stringChar;    ///Create a new string
             //assign to it a string based on the grayscale value.

		if (g >= 240.0) {    //very bright 
			stringChar = ' ';
		} else if (g >= 200.0) {
			stringChar = '.';
		} else if (g >= 180.0) {
			stringChar = '*';
		} else if (g >= 160.0) {
			stringChar = ':';
		} else if (g >= 130.0) {
			stringChar = 'o';
		} else if (g >= 100.0) {
			stringChar= '&';
		} else if (g >= 70.0) {
			stringChar = '8';
		} else if (g >= 50.0) {
			stringChar = '#';
		} else {
			stringChar = '@'; //dark if not black 
		}
		return stringChar; // return the character

	}


	private char negativeString(double g) {  // inheritance of g, the greyscale. Example of Encapsulation via declaring class private 
		final char str;                  //reverses the darkness of the pixel and assigns char 

		if (g >= 230.0) {
			str = '@';
		} else if (g >= 200.0) {
			str = '#';
		} else if (g >= 180.0) {
			str = '8';
		} else if (g >= 160.0) {
			str = '&';
		} else if (g >= 130.0) {
			str = 'o';
		} else if (g >= 100.0) {
			str = ':';
		} else if (g >= 70.0) {
			str = '*';
		} else if (g >= 50.0) {
			str = '.';
		} else {
			str = ' ';
		}
		return str; // the chars 

	}



 
 
 
}   



